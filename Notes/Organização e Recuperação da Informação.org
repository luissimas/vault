#+title:Organização e Recuperação da Informação

Organização e Recuperação da Informação, como o nome já diz, é a área que estuda como organizar e recuperar informações armazenadas na memória secundária de sistemas computacionais.

* Processamento sequencial e ordenação externa
A ordenação externa consiste em classificar e ordenar por algum critério os registros armazenados em um arquivo. Naturalmente, o *acesso a disco* é algo muito mais *custoso* do que o acesso a dados na memória principal, portanto o principal objetivo dos algoritmos que lidam com processamento e ordenação de arquivos é fazer o mínimo de *acessos a disco possíveis*.

A primeira técnica usada para reduzir o número de acessos é o *acesso sequencial* aos registros. Quando o processamento de um arquivo é sequencial, isto é, os registros são acessados em ordem e em sequência, o tempo de acesso é otimizado, pois reduz-se o tempo gasto com o /seeking/ (movimento da cabeça de leitura do disco), já que a cabeça é posicionada apenas uma vez, e então os dados podem ser lidos com a rotação do disco, sem necessidade de um novo /seeking/.

Quando dois ou mais arquivos são processados ao mesmo tempo, cada um de forma sequencial, temos o chamado *processamento cossequencial*.

Nem sempre a ordenação externa é necessária, e em geral o melhor a se fazer é evitá-la, visto que é muito mais eficiente carregar todos os registros na memória principal, utilizar um algoritmo de ordenação, e então escrever os dados no arquivo. Entretanto, nem *sempre é possível carregar todos os dados na memória principal*, e é justamente nesses casos que a ordenação externa se faz necessária.

Visando a eficiência, um algoritmo de ordenação externa deve sempre buscar minimizar o número de acessos a disco, isso pode ser feito com duas ações principais:

- Ler cada registro o menor número de vezes possível.
- Processar o arquivo sequencialmente, do início ao fim.

** Ordenação por intercalação balanceada
O principal método de *ordenação externa* é a ordenação por intercalação balanceada, que utiliza tanto da memória principal quanto a secundária para ordenar os dados de um arquivo.

Esse algoritmo consiste em ler o arquivo sequencialmente, carregando o máximo de registros possíveis na memória, ordenando-os na memória principal e então escrevendo-os em arquivos intermediários, formando *blocos* de registros ordenados nos arquivos. Após isso, os arquivos intermediários são lidos cossequencialmente e é feito o *merge dos blocos* dos arquivos sucessivamente em mais arquivos intermediários, até que se obtenha um *único bloco ordenado* no arquivo final. Com esse método de leitura, é possível ler apenas um registro de cada bloco intermediário por vez, tornando o número de registros do arquivo inicial irrelevante para o processamento.

Dado um arquivo contento $n$ registros, e uma memória principal com capacidade para até $m$ registros. A passada inicial sobre o arquivo produz $\frac{n}{m}$ blocos ordenados. Seja $P$ uma função tal que $P(n)$ é o número de passadas para a fase de intercalação dos blocos ordenados, e seja $f$ o número de arquivos intermediários utilizados em cada passada, para uma intercalação com $f$ caminhos o número de passadas é dado por

$$ P(n) = \log_f \frac{n}{m}$$

Considerando a primeira passada pelo arquivo para formar os primeiros blocos ordenados, o número total de passadas pelo arquivo é dado por $P(n) + 1$.

* Armazenamento e organização de arquivos
Os dispositivos de armazenamento secundário são geralmente *dispositivos de blocos*, isto é, a unidade mínima de armazenamento não são bytes, e sim *grupos de bytes*.

Além da formatação /física do disco/ em setores, trilhas e cilindros, existe também uma /formatação lógica/, feita através de um *sistema de arquivos*. Um sistema de arquivos divide o disco em *regiões endereçáveis* para o sistema operacional e fornece a infraestrutura básica de manipulação de arquivos em memória secundária, oferecendo operações primitivas básicas para a manipulação desses arquivos.

No disco, um arquivo nada mais é do que uma *sequência de bytes* armazenados de forma contínua. Entretanto, para o sistema de arquivos um arquivo é na realidade um conjunto de *páginas de disco*. As páginas de disco são um *conjunto de setores* no disco, e são a unidade de transferência entre disco e memória principal pelo sistema operacional, ou seja, quando uma leitura ou escrita é solicitada ao sistema operacional, uma página inteira é lida ou escrita, independente do tamanho do arquivo de leitura ou da quantidade de dados a ser escrita. Além disso, o sistema operacional também fornece a abstração de *posição corrente*. A posição corrente no arquivo é uma abstração que permite especificar a partir de qual byte um arquivo deve ser lido ou escrito.

#+caption: Páginas de disco.
#+attr_org: :width 500
[[../Attachments/ORI/paginasdisco.png]]

O fato dos arquivos serem gravados ao longo de blocos de disco gera um efeito colateral: a *fragmentação interna*. A fragmentação ocorre quando um arquivo não usa seu último bloco completamente, desperdiçando o espaço do resto do bloco. Como os blocos são as unidades endereçáveis do disco, *um bloco deve conter apenas um arquivo*, portanto o espaço restante de um bloco que não está sendo completamente utilizado não pode ser reaproveitada para nenhum arquivo.

Um arquivo é apenas uma *sequência de bytes* escritos no disco, e uma sequência de bytes por si só *não tem valor ou informação alguma*, pois não há *contexto* e nem *estrutura* para que os dados armazenados tenham algum significado. Portanto, além de uma forma de armazenamento e endereçamento, é necessário estabelecer um método para *impor estrutura* aos dados armazenados, organizar os arquivos. A organização de arquivos é feita em um *nível conceitual* através de dois elementos:

- *Campos:* são a menor unidade lógica de armazenamento, armazenando geralmente uma *informação singular*.
- *Registros:* são agrupamentos de campos, que definem uma informação mais complexa com vários atributos, ou uma *entidade*.

* Indexação
* Árvores B
* Hashing
* Compressão
