#+title: Teoria Da Computação

A teoria da computação é uma área de intersecção entre matemática e computação que busca determinar quais problemas podem ser computados em um dado modelo de computação. Para tal, são necessárias definições formais de modelos de computação e seus componentes.

* Linguagens e Gramáticas
** Símbolo
Um *símbolo* (ou caractere) é uma entidade abstrata *básica* não definida formalmente. Exemplos comuns de símbolos são letras do alfabeto ou dígitos.

** Alfabeto
Um *alfabeto* é um conjunto finito de símbolos, por exemplo: $\Sigma_1 = \{a, b, c\}$, $\Sigma_1 = \{0, 1, \dots, 9\}$.

** Palavra
Uma *palavra* é uma sequência finita de símbolos de um alfabeto justapostos. $abcb$ e $a$ são exemplos de palavras sobre o alfabeto $\{a,b,c\}$. Um conceito particular é o da *palavra vazia*, denotada por $\epsilon$. A palavra $\epsilon$ é palavra sobre qualquer alfabeto, e não contém nenhum caractere.

Dado um alfabeto $\Sigma$, o conjunto $\Sigma^*$ é o conjunto de todas as palavras sobre $\Sigma$. Da mesma forma, o conjunto $\Sigma^+$ é o conjunto de todas as palavras sobre $\Sigma$ exceto a palavra vazia, ou seja, $\Sigma^+ = \Sigma^* - \{\epsilon\}$.

** Linguagem formal
Uma *linguagem formal* é um conjunto de palavras sobre um alfabeto. Sendo assim, exemplos de linguagens formais sobre o alfabeto $\Sigma = \{a,b\}$ são: $\{\}$, $\{\epsilon\}$, $\{a, b , aa, bb, aaa, bbb, ...\}$ etc.

** Gramática
Uma *gramática* é um formalismo axiomático de geração que permite *derivar* todas as palavras da *linguagem* que representa. Pode-se definir uma gramática como uma tupla de $4$ elementos na forma: $G = (V, T, P, S)$ tais que:

- $V$ é um conjunto finito de *símbolos variáveis* ou não-terminais
- $T$ é um conjunto finito de *símbolos terminais*  (disjunto de $V$)
- $P$ é um conjunto finito de pares $(\alpha, \beta)$ de *regras de produção*, sendo que $\alpha$ é uma palavra de $(V \cup T)^+$ e $\beta$ é uma palavra de $(V \cup T)^*$.
- $S$ é um elemento de $V$ chamado *variável inicial*.

Dada uma gramática $G = (V,T,P,S)$, uma linguagem gerada por $G$, denotada por $L(G)$ é composta por todas as palavras de *símbolos terminais* deriváveis a partir do símbolo inicial $S$, ou seja:

$$
L(G) = \{w \in T^* | S \Rightarrow^+ w\}
$$

Duas gramáticas $G1$ e $G2$ são equivalentes se e somente se ambas geram a mesma linguagem, ou seja, se $L(G1) = L(G2)$.

Uma cadeia $w \in T^*$ é dita uma *sentença* da gramática $G=(V,T,P,S)$ se e somente se $S \Rightarrow^* w$, ou seja, se $w$ é uma cadeia formada apenas de símbolos terminais e pode ser obtida a partir do símbolo $S$ da gramática $G$ por meio de sucessivas derivações.

Uma cadeia $\alpha \in (V \cup T)^*$ é dita *forma sentencial* da gramática $G=(V,T,P,S)$ se e somente se $S \Rightarrow^* \alpha$, ou seja, $\alpha$ é uma palavra formada por símbolos variáveis ou terminais (ou ambos). Sendo assim, uma forma sentencial é um dos passos intermediários para alguma sentença gerada pela gramática, ou a própria sentença.

** Hierarquia de Chomsky
A Hierarquia de Chomsky é uma classificação de gramáticas formais descrita pelo linguista Noam Chomsky. A hierarquia possui 4 níveis, sendo os dois últimos (os níveis 2 e 3) particularmente utilizados na descrição e implementação de linguagens de programação.

#+caption: Hierarquia de Chomsky.
#+attr_org: :width 300
[[file:~/dox/vault/Attachments/TC/Hierarquia de Chomsky.png]]

*** Gramática com Estrutura de Frase (Tipo 0)
Uma gramática $G=(V, T, P, S)$ é dita do tipo 0 se todas as regras de produção $\alpha \to \beta$ são da forma:

$$
\alpha \in (V \cup T)^+ \quad \text{e} \quad \beta \in (V \cup T)^*
$$

ou seja, as cadeias $\alpha$ e $\beta$ são formadas por símbolos terminais ou não terminais definidos na gramática, e a cadeia $\alpha$ não pode ser vazia.

*** Gramática Sensível ao Contexto (Tipo 1)
Uma gramática $G=(V, T, P, S)$ é dita do tipo 1 se todas as regras de produção $\alpha \to \beta$ são da forma:

$$
\alpha \in (V \cup T)^+ \quad \text{e} \quad \beta \in (V \cup T)^* \quad \text{com} \quad |\alpha| \leq |\beta| \quad \text{(exceto quando } \beta = \epsilon \text{)}
$$

ou seja, as cadeias $\alpha$ e $\beta$ são formadas por símbolos terminais ou não terminais definidos na gramática, e a cadeia $\alpha$ sempre tem comprimento menor que a cadeia $\beta$, exceto quando $\beta$ for vazia.

*** Gramática Livre de Contexto (Tipo 2)
Uma gramática $G=(V, T, P, S)$ é dita do tipo 2 se todas as regras de produção $\alpha \to \beta$ são da forma:

$$
\alpha \in V \quad \text{e} \quad \beta \in (V \cup T)^*
$$

ou seja, a cadeia $\alpha$ é um símbolo não terminal da gramática e a cadeia $\beta$ é um símbolo terminal ou não terminal.

*** Gramática Regular (Tipo 3)
Uma gramática $G=(V, T, P, S)$ é dita do tipo 3 se todas as regras de produção $\alpha \to \beta$ são da forma:

$$
\alpha \in V \quad \text{e} \quad \beta \in T \cup (V \times T)
$$

ou seja, a cadeia $\alpha$ é um símbolo não terminal da gramática e a cadeia $\beta$ é um símbolo terminal ou um símbolo terminal seguido por um símbolo não terminal.

Uma gramática regular pode ser descrita por uma *gramática linear*. Existem alguns tipos de gramáticas lineares classificadas de acordo com a forma de suas regras de produção. Dados $A, B \in V$ e $w \in T^*$, definem-se as seguintes gramáticas lineares:

- Gramática Linear à Esquerda (GLE): regras de produção na forma $A \to wB$ ou $A \to w$.
- Gramática Linear à Direita (GLD): regras de produção na forma $A \to Bw$ ou $A \to w$.
- Gramática Linear Unitária à Esquerda (GLUE): regras de produção na forma $A \to wB$ ou $A \to w$, com $|w| \leq 1$.
- Gramática Linear Unitária à Direita (GLUD): regras de produção na forma $A \to Bw$ ou $A \to w$, com $|w| \leq 1$.

* Tarefas
** DONE [#B] Anotações semana 1 :ufscar:
CLOSED: [2022-12-04 Sun 14:05] DEADLINE: <2022-12-04 Sun>

** TODO [#B] Lista 1 :ufscar:
DEADLINE: <2022-12-18 Sun>
