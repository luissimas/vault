:PROPERTIES:
:ID:       8c0b36ed-29b8-4688-a7ec-fff94ec65bff
:END:
#+title:Notação Big Theta

A notação $\Theta$ é uma notação derivada da [[id:20ecb870-62df-41a4-b342-115f6368166e][análise assintótica]] e utilizada na análise de complexidade de algoritmos. Essa notação descreve tanto um limitante superior quanto um limitante inferior para a complexidade de um determinado algoritmo.

Dado um algoritmo cujo número de instruções executadas em função do tamanho da entrada é dado por $f(n)$, dizer que tal algoritmo tem complexidade $\Omega(g(n))$ é o mesmo que dizer que existem três constantes positivas $c_1$, $c_2$ e $n_0$ tais que $c_1g(n) \leq f(n) \leq c_2g(n) \quad \forall n \geq n_0$, ou seja, a partir de um determinado $n=n_0$ função $f(n)$ sempre está dentro do intervalo $[c_1g(n), c_2g(n)]$.

#+BEGIN_SRC python :results output file :file big-theta-example.png :output-dir attachments/ :exports results
import sys
import matplotlib.pyplot as plt
import numpy as np
from intersect import intersection

x = np.linspace(0, 5, 1000)
y1 = np.exp(x) - 10
y2 = np.exp(x) / 2 - 5
y3 = np.exp(x) * 2 - 20
n_0, y_0 = intersection(x, y1, x, y2)

plt.xlabel("n")
plt.ylabel("Complexidade")

plt.xticks([])
plt.yticks([])

plt.plot(x, y1, label=r"$f(n)$")
plt.plot(x, y2, label=r"$c_1g(n)$")
plt.plot(x, y3, label=r"$c_2g(n)$")
plt.plot(n_0, y_0, "or", label=r"$n_0$")

plt.legend()
plt.savefig(sys.stdout.buffer)
#+END_SRC

#+caption: Gráfico exemplificando a notação $\Theta$
#+attr_org: :width 500
#+attr_latex: :width 250 :placement [H]
#+RESULTS:
[[file:attachments/big-theta-example.png]]
